#include <asm-generic/ioctls.h>
#include <math.h>
#include <string.h>
#include <sys/ioctl.h>
#include <unistd.h>
#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>

#define FPS 20
#define PI 3.14159265

typedef struct {
	int x;
	int y;
} coord;

typedef struct {
	float x;
	float y;
} vec2;

typedef struct {
	float x;
	float y;
	float z;
} vec3;

typedef struct {
	vec3 start;
	vec3 end;
} line_t;

typedef struct {
	coord start;
	coord end;
} line_2d_t;

typedef struct {
	char* buffer;
	size_t buffer_size;
} screen_buffer_t;

coord screen_dimensions = {0};
screen_buffer_t screen_buffer = {0};

void update_screen_dimensions();
void update_screen_buffer();
size_t calculate_buffer_size();
void render();
void draw_screen_buffer();

coord map_rel_to_abs(vec2 pos);
vec2 project_relative(vec2 pos, float z);

void draw_char(char character, coord pos);
void draw_line_absolute(char character, coord start, coord end);
void draw_line(char character, line_t line);

vec3 rotate_around_axis(vec3 point, float angle_deg, vec3 axis);
line_t rotate_line(line_t line, float angle_deg, vec3 axis);
line_t move_line(line_t line, vec3 offset);
void normalize(vec3* point);

line_2d_t fix_aspect_ratio(line_2d_t line);

void sigint_handle(int signal);

int vertices_count = 8;
int lines_count = 12;

vec3* cube_vertices;
line_t* cube_lines;
vec3 rotation_pivot= (vec3){0.0f, 0.0f, 4.0f};

size_t counter;

int main(void) {
	counter = 0;
	signal(SIGINT, sigint_handle);
	screen_buffer.buffer = (char*)malloc(100000);
	screen_buffer.buffer_size = 100000;

	vertices = (vec3*)malloc(sizeof(vec3)*vertices_count);
	// front
	vertices[0] = (vec3){-1.0f,  -1.0f, 3.0f};
	vertices[1] = (vec3){-1.0f,   1.0f, 3.0f};
	vertices[2] = (vec3){ 1.0f,   1.0f, 3.0f};
	vertices[3] = (vec3){ 1.0f,  -1.0f, 3.0f};

	// back
	vertices[4] = (vec3){-1.0f, -1.0f, 5.0f};
	vertices[5] = (vec3){-1.0f,  1.0f, 5.0f};
	vertices[6] = (vec3){ 1.0f,  1.0f, 5.0f};
	vertices[7] = (vec3){ 1.0f, -1.0f, 5.0f};

	lines = (line_t*)malloc(sizeof(line_t)*lines_count);
	// front
	lines[0] = (line_t){vertices[0], vertices[1]};
	lines[1] = (line_t){vertices[1], vertices[2]};
	lines[2] = (line_t){vertices[2], vertices[3]};
	lines[3] = (line_t){vertices[3], vertices[0]};

	// back
	lines[4] = (line_t){vertices[4], vertices[5]};
	lines[5] = (line_t){vertices[5], vertices[6]};
	lines[6] = (line_t){vertices[6], vertices[7]};
	lines[7] = (line_t){vertices[7], vertices[4]};

	// sides
	lines[8] = (line_t){vertices[0], vertices[4]};
	lines[9] = (line_t){vertices[1], vertices[5]};
	lines[10] = (line_t){vertices[2], vertices[6]};
	lines[11] = (line_t){vertices[3], vertices[7]};

	update_screen_dimensions();
	for (int i = 0; i < screen_dimensions.y; ++i) {
		printf("\n");	
	}
	while (true) {
		update_screen_dimensions();
		update_screen_buffer();
		render();
		draw_screen_buffer();
		++counter;
		usleep(1000000/FPS);
	}
}


void update_screen_dimensions() {
	struct winsize winsize;
	ioctl(STDOUT_FILENO, TIOCGWINSZ, &winsize);
	screen_dimensions = (coord){ winsize.ws_col - 1, winsize.ws_row};
}

void update_screen_buffer() {
	size_t should_be = calculate_buffer_size();
	if (screen_buffer.buffer_size != should_be) {
		screen_buffer.buffer_size = should_be;
	}
	memset(screen_buffer.buffer, ' ', should_be);
	for (int i = 0; i < screen_dimensions.y; ++i) {
		screen_buffer.buffer[i * (screen_dimensions.x + 1)] = '\n';
	}
	screen_buffer.buffer[should_be - 1] = 0;
}

size_t calculate_buffer_size() {
	return ((screen_dimensions.x + 1) * (screen_dimensions.y - 2)) + 1;
}

void render() {
	for (int i = 0; i < lines_count; ++i) {
		line_t line;
	
		// cube 1	
		line = lines[i];
		line = rotate_line(line, counter*6, (vec3){0.0f, 1.0f, 1.0f});
		line = move_line(line, (vec3){cos((float)counter / 10) * 2, sin((float)counter /10) * 2, (cos((float)counter / 20) * 3 + 3)});
		draw_line('a', line);

		// cube 2
		line = lines[i];
		line = rotate_line(line, counter*6, (vec3){0.0f, 1.0f, 1.0f});
		line = move_line(line, (vec3){cos(((float)counter + 600) / 10) * 2, sin(((float)counter + 600) /10) * 2, (cos((float)counter / 20) * 3 + 3)});
		draw_line('a', line);

	}
}

void draw_screen_buffer() {
	printf("\x1b[2J\x1b[H");
	printf("%.*s\n", screen_buffer.buffer_size ,screen_buffer.buffer);
}


void draw_char(char character, coord pos) {
	if (pos.x > screen_dimensions.x || pos.y > screen_dimensions.y || pos.x < 0 || pos.y < 0) {
		return;
	}
	screen_buffer.buffer[(screen_dimensions.x + 1) * pos.y + pos.x] = character;
}

void draw_line_absolute(char character, coord start, coord end) {
	start = (coord){ start.x * 2, start.y };
	end   = (coord){ end.x * 2,   end.y   };

	int dx = end.x - start.x; 
	int dy = end.y - start.y; 
  
	int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy); 
  
	float x_inc = dx / (float)steps; 
	float y_inc = dy / (float)steps; 
  
	float x = start.x; 
	float y = start.y; 
	for (int i = 0; i <= steps; i++) { 
		draw_char(character, (coord){ (int)x, (int)y });
		x += x_inc;
		y += y_inc;
	} 
} 

void draw_line(char character, line_t line) {
	line_2d_t new_line;
	new_line.start = map_rel_to_abs(project_relative((vec2){line.start.x, line.start.y}, line.start.z));
	new_line.end   = map_rel_to_abs(project_relative((vec2){line.end.x, line.end.y}, line.end.z));
	new_line = fix_aspect_ratio(new_line);
	draw_line_absolute('a', new_line.start, new_line.end);
}

coord map_rel_to_abs(vec2 pos) {
	int mx = (int)((pos.x + 1.0f) / 2.0f * (float)screen_dimensions.x) / 2;
	int my = (int)((pos.y + 1.0f) / 2.0f * (float)screen_dimensions.y);
	return (coord){mx, my};
}

void sigint_handle(int signal) {
	printf("\x1b[2J\x1b[H");
	free(screen_buffer.buffer);
	free(vertices);
	free(lines);
	exit(0);
}

vec2 project_relative(vec2 pos, float z) {
	if (z == 0)
		return (vec2){0.0f, 0.0f};
	else
		return (vec2){pos.x/z, pos.y/z};
}


void normalize(vec3* point) {
    float length = sqrt(point->x * point->x + point->y * point->y + point->z * point->z);
    point->x /= length;
    point->y /= length;
    point->z /= length;
}

vec3 rotate_around_axis(vec3 point, float angle_deg, vec3 axis) {
    float angle_rad = angle_deg * (PI / 180.0);  // Convert degrees to radians
    float cos_theta = cos(angle_rad);
    float sin_theta = sin(angle_rad);
    point.x -= rotation_pivot.x;
    point.y -= rotation_pivot.y;
    point.z -= rotation_pivot.z;
    
    normalize(&axis);
    
    vec3 rotated;

    // Rodrigues' rotation formula
    rotated.x = point.x * cos_theta + (1 - cos_theta) * (axis.x * (axis.x * point.x + axis.y * point.y + axis.z * point.z))
                + sin_theta * (axis.y * point.z - axis.z * point.y);
    
    rotated.y = point.y * cos_theta + (1 - cos_theta) * (axis.y * (axis.x * point.x + axis.y * point.y + axis.z * point.z))
                + sin_theta * (axis.z * point.x - axis.x * point.z);
    
    rotated.z = point.z * cos_theta + (1 - cos_theta) * (axis.z * (axis.x * point.x + axis.y * point.y + axis.z * point.z))
                + sin_theta * (axis.x * point.y - axis.y * point.x);

    rotated.x += rotation_pivot.x;
    rotated.y += rotation_pivot.y;
    rotated.z += rotation_pivot.z;
    return rotated;
}

line_t rotate_line(line_t line, float angle_deg, vec3 axis) {
	line.start = rotate_around_axis(line.start, angle_deg, axis);
	line.end   = rotate_around_axis(line.end, angle_deg, axis);
	return line;
}


line_t move_line(line_t line, vec3 offset) {
	line.start.x += offset.x;
	line.start.y  += offset.y;
	line.start.z += offset.z;
	line.end.x   += offset.x;
	line.end.y   += offset.y;
	line.end.z   += offset.z;
	return line;
}


line_2d_t fix_aspect_ratio(line_2d_t line) {
	if (screen_dimensions.x == 0 || screen_dimensions.y == 0)
		return line;
	if (screen_dimensions.x > screen_dimensions.y) {
		float ratio = screen_dimensions.y/screen_dimensions.x;
		if (ratio == 0)
			return line;
		line.start.x /= ratio; 
		line.end.x   /= ratio;
		line.start.y /= ratio;
		line.end.y   /= ratio;
	} else {
		float ratio = screen_dimensions.x/screen_dimensions.y;
		if (ratio == 0)
			return line;
		line.start.x /= ratio;
		line.end.x   /= ratio;
		line.start.y /= ratio;
		line.end.y   /= ratio;
	}
}
